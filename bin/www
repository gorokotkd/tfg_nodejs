#!/usr/bin/env node
const mongoose = require('mongoose');
const mongoUrl = "mongodb://localhost:27017";
const dbName = 'ticketbai';
/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('tfg-nodejs:server');
var http = require('http');
const cassandra = require('cassandra-driver');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
/*
mongoose.connect(mongoUrl + "/" + dbName).then(() => { console.log("ConexiÃ³n a MongoDB realizada correctamente") });
const client = new cassandra.Client({
  contactPoints: ['127.0.0.1'],
  keyspace: 'ticketbai',
  localDataCenter: 'datacenter1'
});

client.connect()
  .then(function () {
      console.log('Connected to cluster with %d host(s): %j', client.hosts.length, client.hosts.keys());
      //console.log('Keyspaces: %j', Object.keys(client.metadata.keyspaces));
  })
  .catch(function (err) {
      console.error('There was an error when connecting', err);
      return client.shutdown().then(() => { throw err; });
});
*/
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
